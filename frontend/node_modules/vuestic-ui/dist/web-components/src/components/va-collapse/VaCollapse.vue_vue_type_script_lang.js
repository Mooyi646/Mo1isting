import { defineComponent, shallowRef, ref, computed } from "vue";
import { p as pick } from "../../../vendor.js";
import { a as useAccordionItem } from "../va-accordion/hooks/useAccordion.js";
import { g as generateUniqueId } from "../../utils/uuid.js";
import { V as VaIcon } from "../va-icon/index.js";
import { u as useSelectableEmits } from "../../composables/useSelectable.js";
import { u as useResizeObserver } from "../../composables/useResizeObserver.js";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
import { a as useStatefulProps, b as useStateful } from "../../composables/useStateful.js";
import { u as useColors } from "../../composables/useColors.js";
import { u as useTextColor } from "../../composables/useTextColor.js";
import { u as useBem } from "../../composables/useBem.js";
const _sfc_main = defineComponent({
  name: "VaCollapse",
  components: {
    VaIcon
  },
  props: {
    ...useComponentPresetProp,
    ...useStatefulProps,
    modelValue: { type: Boolean, default: false },
    disabled: { type: Boolean, default: false },
    header: { type: String, default: "" },
    icon: { type: String, default: "" },
    solid: { type: Boolean, default: false },
    color: { type: String, default: "background-element" },
    textColor: { type: String, default: "" },
    colorAll: { type: Boolean, default: false },
    flat: { type: Boolean, default: false }
  },
  emits: ["update:modelValue", ...useSelectableEmits],
  setup(props, { emit, slots }) {
    const body = shallowRef();
    const { valueComputed } = useStateful(props, emit, "modelValue", { defaultValue: false });
    const { getColor, getHoverColor } = useColors();
    const { accordionProps, valueProxy: computedModelValue = valueComputed } = useAccordionItem();
    const { textColorComputed } = useTextColor();
    const bodyHeight = ref();
    useResizeObserver([body], () => {
      var _a;
      bodyHeight.value = ((_a = body.value) == null ? void 0 : _a.clientHeight) ?? 0;
    });
    const height = computed(() => computedModelValue.value ? bodyHeight.value : 0);
    const getTransition = () => {
      const duration = height.value / 1e3 * 0.2;
      return `${duration > 0.2 ? duration : 0.2}s`;
    };
    const getBackground = () => {
      return props.color && props.colorAll ? getHoverColor(getColor(props.color)) : "";
    };
    const uniqueId = computed(generateUniqueId);
    const headerIdComputed = computed(() => `header-${uniqueId.value}`);
    const panelIdComputed = computed(() => `panel-${uniqueId.value}`);
    const tabIndexComputed = computed(() => props.disabled ? -1 : 0);
    const headerAttributes = computed(() => ({
      id: headerIdComputed.value,
      tabindex: tabIndexComputed.value,
      "aria-controls": panelIdComputed.value,
      "aria-expanded": computedModelValue.value,
      "aria-disabled": props.disabled,
      role: "button"
    }));
    const computedClasses = useBem("va-collapse", () => ({
      ...pick(props, ["disabled", "solid", "flat"]),
      expanded: computedModelValue.value,
      active: props.solid && computedModelValue.value,
      popout: !!(accordionProps.value.popout && computedModelValue.value),
      inset: !!(accordionProps.value.inset && computedModelValue.value)
    }));
    const toggle = () => {
      if (props.disabled) {
        return;
      }
      computedModelValue.value = !computedModelValue.value;
    };
    return {
      body,
      height,
      toggle,
      computedModelValue,
      headerIdComputed,
      headerAttributes,
      panelIdComputed,
      tabIndexComputed,
      textColorComputed,
      computedClasses,
      headerStyle: computed(() => ({
        paddingLeft: props.icon && 0,
        color: textColorComputed.value,
        backgroundColor: props.color ? getColor(props.color) : ""
      })),
      contentStyle: computed(() => {
        return {
          visibility: computedModelValue.value ? "visible" : "hidden",
          height: `${height.value}px`,
          transitionDuration: getTransition(),
          background: computedModelValue.value ? getBackground() : ""
        };
      })
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaCollapse.vue_vue_type_script_lang.js.map
